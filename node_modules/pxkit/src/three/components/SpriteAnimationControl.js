import * as THREE from "three";
import {SpriteMixer} from './SpriteMixer';

export default class SpriteAnimationControl {
    constructor() {
        this.spriteMixer = null;
        this.actionSprite = null;
        this.running = null;
        this.actions = {};

        this.clock = new THREE.Clock();
        this.delta = null;

        this.update = this.update.bind(this);
        this.onPlayLoop = this.onPlayLoop.bind(this);
    }

    init(parentObj) {
        this.parentObj = parentObj;

        var loader = new THREE.TextureLoader();

        ///////////////////////////////
        ///  SPRITEMIXER RELATED CODE
        ///////////////////////////////


        /// SPRITEMIXER INSTANTIATION AND LISTENERS EXAMPLES

        this.spriteMixer = SpriteMixer();

        this.spriteMixer.addEventListener('finished', (e)=> {
            console.log(e);
        });

        this.spriteMixer.addEventListener('loop', (e)=> {
            // console.log(e);
        });


        /// ACTIONSPRITE AND ACTIONS INSTANTIATION

        // Make sure to use the texture once it's fully loaded, by
        // passing a callback function to the loader.
        loader.load("static/image/character.png", (texture)=> {

            // An ActionSprite is instantiated with these arguments :
            // - which THREE.Texture to use
            // - the number of columns in your animation
            // - the number of rows in your animation
            this.actionSprite = this.spriteMixer.ActionSprite( texture, 10, 2 );
            this.actionSprite.setFrame( 9 );

            // Two actions are created with these arguments :
            // - which actionSprite to use
            // - index of the beginning of the action
            // - index of the end of the action
            // - duration of ONE FRAME in the animation, in milliseconds
            this.actions.runRight = this.spriteMixer.Action(this.actionSprite, 0, 8, 40);
            this.actions.runLeft = this.spriteMixer.Action(this.actionSprite, 10, 18, 40);

            this.actionSprite.scale.set(1.7, 2, 1);
            this.parentObj.add( this.actionSprite );
            this.actionSprite.position.set(10,-8,6);

            this.onPlayLoop();
        });

        this.update();


    }
    // These functions, called by the user interface, call the various
    // methods available to control a sprite action.

    onPlayOnce() {
        this.actions.runLeft.playOnce();
    };


    onPlayLoop() {
        this.actions.runLeft.playLoop();
    };


    onPauseNextEnd() {
        this.actions.runLeft.pauseNextEnd();
    };


    onPause() {
        this.actions.runLeft.pause();
    };


    onStop() {
        this.actions.runLeft.stop();
    };


    onResume() {
        this.actions.runLeft.resume();
    };


    runRight() {
        if ( this.running != 'right' ) {
            this.actions.runRight.playLoop();
            this.running = 'right' ;
        };
    };


    runLeft() {
        if ( this.running != 'left' ) {
            this.actions.runLeft.playLoop();
            this.running = 'left' ;
        };
    };


    stopRunning() {

        this.actionSprite.currentAction.stop();

        if ( this.running == 'right' ) {
            this.actionSprite.setFrame( 9 );
        } else {
            this.actionSprite.setFrame( 19 );
        };

        this.running = undefined ;
    };


    update() {
        requestAnimationFrame(this.update);
        this.delta = this.clock.getDelta();
        this.spriteMixer.update( this.delta );
    }

    // loop() {
    //     requestAnimationFrame(loop);
    //     renderer.render( scene, camera );
    //     stats.update();
    //
    //     ////// UPDATING
    //
    //     delta = clock.getDelta();
    //     spriteMixer.update( delta );
    //
    //     if ( running == 'right' ) {
    //         actionSprite.position.x += 0.05 ;
    //     } else if ( running == 'left' ) {
    //         actionSprite.position.x -= 0.05 ;
    //     };
    // };
}
