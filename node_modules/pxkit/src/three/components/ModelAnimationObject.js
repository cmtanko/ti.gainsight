import * as THREE from "three";
import {EventDispatcher} from "three/src/core/EventDispatcher";

/*
 * @Description: 操作模型动画的Object类
 * @Author: 彭祥 (Email:245803627@qq.com)
 * @Date: 2020-07-06 11:32
 * @LastEditors: pengxiang
 * @LastEditTime: 2020-07-06 11:32
 */
export class ModelAnimationObject {
    /* 模型object
     * @param object
     */
    constructor(object) {
        this.renderUpdateAnimation = this.renderUpdateAnimation.bind(this);
        this.playForward = this.playForward.bind(this);
        this.init = this.init.bind(this);

        this.init(object);
        this.object3d = object;
    }
    init(object) {
        const mixer = new THREE.AnimationMixer( object );
        const clip = object.animations[ 0 ];
        // var action = mixer.clipAction( object.animations[ 0 ] );
        const action = mixer.clipAction( clip );
        action.time = 0;
        // action.loop = THREE.LoopPingPong;
        action.loop = THREE.LoopOnce;
        action.clampWhenFinished = true;

        this.animationTotalTime = clip.duration;
        this.clip = clip;
        this.action = action;
        this.mixer = mixer;
        this.clock = new THREE.Clock();
        this.delta = null;
        this.nAnimationFrameId = null;

        this.renderUpdateAnimation();
    }
    gotoAndStop(value) {
        // 开始结束时间设置为一样，相当于播放时间为0，直接跳转到时间点对应的状态
        this.action.time = value; //操作对象设置开始播放时间
        this.clip.duration = this.action.time;//剪辑对象设置播放结束时间
        this.action.play(); //开始播放
    }
    playForward(speed) { //按照速率一帧一帧的正播
        speed = speed || 0.05;
        if(this.action.time >= this.animationTotalTime){this.dispatchEvent( { type: 'finished', message: 'forward' } ); this.stop(); return false;}
        this.action.time =this.action.time + speed; //操作对象设置开始播放时间
        this.clip.duration = this.action.time;//剪辑对象设置播放结束时间
        this.action.play(); //开始播放
    }
    playBackward(speed) { //按照速率一帧一帧的倒播
        speed = speed || 0.05;
        if(this.action.time <=0){this.dispatchEvent( { type: 'finished', message: 'backward' } ); this.stop(); return false;}
        this.action.time = this.action.time - speed; //操作对象设置开始播放时间
        this.clip.duration = this.action.time;//剪辑对象设置播放结束时间
        this.action.play(); //开始播放
    }
    playAndStopForward(startTime, endTime) { //从当前时间播放，到结束时间停止
        startTime = startTime || this.action.time;
        endTime = endTime || this.animationTotalTime;
        if(this.action.time >= this.animationTotalTime){return false;}
        this.action.time = startTime; //操作对象设置开始播放时间
        this.clip.duration = endTime;//剪辑对象设置播放结束时间
        this.action.play(); //开始播放
    }
    playAndStopBackward(startTime, endTime) { //从当前时间播放，到结束时间停止
        startTime = startTime || this.action.time;
        endTime = endTime || 0;
        if(this.action.time <=0){return false;}
        this.action.time = startTime; //操作对象设置开始播放时间
        this.clip.duration = endTime;//剪辑对象设置播放结束时间
        // this.action.timeScale = -1;
        this.action.play(); //开始播放
    }
    playAndStop(startTime, endTime, reverse, speed) {

    }

    /*
     * 播放动画
     * @param speed    每帧的时间速度（秒）
     * @param reverse  是否倒播 true：倒播 false：正播 （默认 false）
     */
    play(reverse, speed) {
        reverse = reverse || false;
        if (this.anTimer) {window.clearInterval(this.anTimer); this.anTimer = null;}
        this.anTimer = window.setInterval(()=> {
            if(reverse === false) {
                this.playForward(speed);
            }else if(reverse === true) {
                this.playBackward(speed);
            }
            this.dispatchEvent( { type: 'playing', message: reverse } );
        }, 50);

        this.renderUpdateAnimation();

        this.dispatchEvent( { type: 'play', message: reverse } );
    }

    stop() {
        window.clearInterval(this.anTimer); this.anTimer = null;

        cancelAnimationFrame(this.nAnimationFrameId);
        // this.mixer = null;

        this.dispatchEvent( { type: 'stop', message: '' } );
    }


    renderUpdateAnimation() {
        this.nAnimationFrameId = requestAnimationFrame(this.renderUpdateAnimation);
        this.delta = this.clock.getDelta();
        if (this.mixer) this.mixer.update(this.delta); //更新动画控制器
    }
}

// 将 EventDispatcher.prototype 与自定义对象 prototype 进行混合
Object.assign( ModelAnimationObject.prototype, EventDispatcher.prototype );
