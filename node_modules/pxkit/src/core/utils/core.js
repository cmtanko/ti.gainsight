import $ from 'jquery';
import XML from '../../../libs/ObjTree';


/*
 * @Description: 工具类
 * @Author: 彭祥 (Email:245803627@qq.com)
 * @Date: 2019/3/7 14:59
 * @LastEditors: pengxiang
 * @LastEditTime: 2019/3/7 14:59
 */

/*把当前元素 插入 到目标元素后面
* // insertAfter(a1, a2);   // $("#canvas").insertAfter($("#dom_overlay_container"));
*/

export function insertAfter(newElement, targetElement){
    var parent = targetElement.parentNode;
    // 如果最后的节点是目标元素，则直接添加
    if(parent.lastChild === targetElement){
        parent.appendChild(newElement)
    }else{
        //如果不是，则插入在目标元素的下一个兄弟节点 的前面
        parent.insertBefore(newElement,targetElement.nextSibling)
    }
}

/*
 * 把字符串转成对象Object
 * @param str [str='{name:"Helen",age:"22",sex:"female"}' 或者 str='id:zqcm, startNum:0, endNum:25']
 */
export function convertStr2Obj(str) {
    // const obj = new Function('return '+str)();
    str = str.replace('{', '').replace('}', '').replace(/\s*/g,"");
    const obj = new Object();
    const strs = str.split(",");
    for(let i = 0; i < strs.length; i ++) {
        obj[strs[i].split(":")[0]]=(strs[i].split(":")[1]);
    }
    return obj;
}

/*
 *设置控制输出的console不同的颜色和形状的方法
 */
export function nConsole() {
    // console.log('%c' + cube.name + '%c => mouseup', 'color: #fff; background: #41b882; padding: 3px 4px;', 'color: #41b882; background: #fff;');
}

//---------------------------------------------时间方面的操作 开始------------------------------------------------------//
/*获取时间 格式为 年-月-日_时:分:秒*/
export function getYMDHMSTime(){
    var nowTime = new Date();
    var month = nowTime.getMonth() + 1;
    var day = nowTime.getDate();
    var year = nowTime.getFullYear();
    var hh = nowTime.getHours();
    var mm = nowTime.getMinutes();
    var ss = nowTime.getSeconds();
    var dateString = year + "-" + month + "-" + day + "_" + hh + ":" + mm + ":" + ss;
    return dateString;
}
/*获取时间 格式为 时分秒 [17:17:06]*/
export function getHMSTime() {
    var str = "";
    var mydata = new Date();
    var hour = getPrefixNum(mydata.getHours());
    var minute = getPrefixNum(mydata.getMinutes());
    var second = getPrefixNum(mydata.getSeconds());
    str = "[" + hour + ":" + minute + ":" + second + "]   ";
    return str;
}
function getPrefixNum(param1) {
    if (param1 < 10 && param1 >= 0) {
        return "0" + param1.toString();
    }
    return param1.toString();
}

/*  转换时间格式 把秒转化为 29分31秒 格式
  * @param time 秒
  * @return  返回格式: 29:31
  */
export function convertTime(time) {
    var min = parseInt(time % 3600 / 60);
    var sec = parseInt(time % 60);

    return (min < 10 ? "0" + min : "" + min)
        + ":" + (sec < 10 ? "0" + sec : "" + sec);
}

/*  转换时间格式 把秒转化为 00时29分31秒 格式
  * @param time 秒
  * @return  返回格式: 29:31
  */
export function convertS2HMS(time) {
    // const hour = parseInt(time % (60*60*24) / 24);
    // const min  = parseInt(time % (60*60) / 60);
    // const sec  = parseInt(time % 60);

    const hour = Math.floor(time / 3600);
    const min = Math.floor((time / 60 % 60));
    const sec = Math.floor((time % 60));

    const str = (hour < 10 ? "0" + hour : "" + hour)
        + ":" + (min < 10 ? "0" + min : "" + min)
        + ":" + (sec < 10 ? "0" + sec : "" + sec);

    return str;
}
//---------------------------------------------时间方面的操作 结束------------------------------------------------------//

export function loadExtJS(url) {
    var oHead = document.getElementsByTagName('head').item(0);
    var oScript = document.createElement("script");
    oScript.type = "text/javascript";
    oScript.src = url;
    oScript.id = 'ejs_' + url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.js'));
    oHead.appendChild(oScript);
}

export function loadExtCSS(url) {
    var oHead = document.getElementsByTagName('head').item(0);
    var oScript = document.createElement("link");
    oScript.rel = "stylesheet";
    oScript.type = "text/css";
    oScript.href = url;
    oScript.id = 'ecss_' + url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.css'));
    oHead.appendChild(oScript);
}

/* 验证一个字符串是否是xml格式  errorCode 0是xml正确，1是xml错误，2是无法验证 */
export function isXML(xmlStr) {
    //errorCode 0是xml正确，1是xml错误，2是无法验证
    var xmlDoc,errorMessage,errorCode = 0;
    // code for IE
    if (window.ActiveXObject) {
        xmlDoc  = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async="false";
        xmlDoc.loadXML(xmlStr);

        if(xmlDoc.parseError.errorCode!=0) {
            errorMessage="XML错误code: " + xmlDoc.parseError.errorCode + "\n";
            errorMessage=errorMessage+"错误原因: " + xmlDoc.parseError.reason;
            errorMessage=errorMessage+"错误位置: " + xmlDoc.parseError.line;
            errorCode = 1;
        } else {
            errorMessage = "XML格式正确";
        }
    }
    // code for Mozilla, Firefox, Opera, chrome, safari,etc.
    else if (document.implementation.createDocument) {
        var parser=new DOMParser();
        xmlDoc = parser.parseFromString(xmlStr,"text/xml");
        var error = xmlDoc.getElementsByTagName("parsererror");
        if (error.length > 0) {
            if(xmlDoc.documentElement.nodeName=="parsererror"){
                errorCode = 1;
                errorMessage = xmlDoc.documentElement.childNodes[0].nodeValue;
            } else {
                errorCode = 1;
                errorMessage = xmlDoc.getElementsByTagName("parsererror")[0].innerHTML;
            }
        } else {
            errorMessage = "XML格式正确";
        }
    } else {
        errorCode = 2;
        errorMessage = "浏览器不支持验证，无法验证XML正确性";
    }
    if(errorCode !== 0) {
        console.log(errorMessage);
    }
    return {
        "msg":errorMessage,
        "error_code":errorCode
    };
}

/*判断一个字符串是否是JSON格式（http://www.cnblogs.com/lanleiming/p/7096973.html）*/
export function isJSON(str) {
    if (typeof str == 'string') {
        try {
            var obj=JSON.parse(str);
            if(typeof obj == 'object' && obj ){
                return true;
            }else{
                return false;
            }

        } catch(e) {
            console.log('It is not a JSON!' +'\n'+'error：'+str +'\n'+e);
            return false;
        }
    }
    // console.log('It is not a string!');
}

/*
 * 获取url中"?"符后的字串
 * @returns {Object}
 */
export function getURLRequest() {
    // var url = '?sc=53616c7465645f5fc66def7a641e98dc8f6bf5d0f15d376accbb794f8f77cb6a';
    var strs;
    var url = window.location.search; //获取url中"?"符后的字串
    var theRequest = new Object();
    if (url.indexOf("?") != -1) {
        var str = url.substr(1);
        strs = str.split("&");
        for(var i = 0; i < strs.length; i ++) {
            theRequest[strs[i].split("=")[0]]=(strs[i].split("=")[1]);
        }
    }
    return theRequest;
}

/*
 * 搜索 字符串里 被搜索内容 的所有下标（索引）  用法 searchSubStr("../content/menu/menu.html","/");
 * @param str
 * @param subStr
 */
export function searchSubStr(str,subStr){
    var positions = new Array();
    var pos = str.indexOf(subStr);
    while(pos>-1){
        positions.push(pos);
        pos = str.indexOf(subStr,pos+1);
    }
    return positions;
}

/*
 * xml转字符串
 * @param xmlData （加载后的xml返回值）
 * @returns {*}
 */
export function xmlToString(xmlData) {
    var xmlString;
    //IE
    if (window.ActiveXObject){
        xmlString = xmlData.xml;
    }
    // code for Mozilla, Firefox, Opera, etc.
    else{
        xmlString = (new XMLSerializer()).serializeToString(xmlData);
    }
    return xmlString;
}

/*
 * 字符串转xml
 * @param str
 * @returns {*}
 */
export function stringToXML(str) {
    if(document.all){
        var xmlDom=new ActiveXObject("Microsoft.XMLDOM");
        xmlDom.loadXML(str);
        return xmlDom
    }
    else
        return new DOMParser().parseFromString(str, "text/xml");
}

/*
 * xml转json
 * 使用方法 xml2json();  使用之前需引用 jquery-2.2.4.min.js 和 ObjTree.js ()
 * 获取某一属性；// var x1 = tree.root.item[0]['-id'];
 * @param val
 *
 * val = '<?xml version="1.0" encoding="UTF-8"?>\n' +
 '<root>\n' +
 '\t<item id="mItem_1" name="一：拆卸发动机线束" partGroup="1" href="ext/page/scene1/scene1.html">\n' +
 '\t</item>\n' +
 '\t<item id="mItem_2" name="二：拆卸发动机进气导管" partGroup="2" href="ext/page/scene1/scene1.html">\n' +
 '\t</item>\n' +
 '\t<item id="mItem_3" name="三：拆卸进气歧管总成" partGroup="3" href="ext/page/scene1/scene1.html">\n' +
 '</root>\n';
 */
export function xml2json(val, prefix) {
    // var space = "" ? "  " : "";
    var space = "  ";
    prefix = prefix ? prefix : '_';
    var xotree = new XML.ObjTree();
    xotree.attr_prefix = prefix;
    var idata = $.trim(val);
    var tree = xotree.parseXML(idata);
    if (!tree.html) {
        // var str = JSON.stringify(tree, null, space);
        // console.log(str);
        console.log('XML转JSON成功');
        return tree;
    } else {
        console.log('XML格式错误');
        return false;
    }
}
/*
 * json转xml
 * @param val String
 */
export function json2xml(val) {
    try {
        var xotree = new XML.ObjTree();
        // xotree.attr_prefix = '_';
        var idata = $.trim(val);
        var str = xotree.writeXML(JSON.parse(idata));
        console.log(str);
        alert('JSON转XML成功');
        return str;
    } catch (e) {
        alert('JSON格式错误');
        return false;
    }
}

/*
 * 异步动态加载js文件里的内容文本
 */
export function loadExtJSContext() {
    var url = "../h5code/js/baseAn.js";
    var oHead = document.getElementsByTagName('head').item(0);
    var oScript = document.createElement("script");
    oScript.type = "text/javascript";

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (xhttp.readyState === 4 && xhttp.status === 200) {
            var txt = xhttp.responseText;
            oScript.appendChild(document.createTextNode(txt));
            oHead.appendChild(oScript);
        }
    };
    xhttp.open("GET", url, true);
    xhttp.send();
}

/*
 * 判断一个url是否可以访问，是否有效
 * @param _url
 * @param fun
 * //用法
 * isUrlValid(_url, function (res) {
 *       if (res === false) {
 *          alert("请求的无效页面");
 *      } else {
 *          //链接正确
 *      }
 *  });
 */
export function isUrlValid(_url, fun) {
    $.ajax({
        url: _url,
        type: "get",
        success: function () {
            //说明请求的url存在，并且可以访问
            if ($.isFunction(fun)) {
                fun(true);
            }
        },
        statusCode: {
            404: function () {
                //说明请求的url不存在
                if ($.isFunction(fun)) {
                    fun(false);
                }
            }
        }
    });
}

/*js版本*/
export function isUrlValid2(url, fun) {
    var xmlhttp=null;
    if (window.XMLHttpRequest) {
        // code for IE7, Firefox, Opera, etc.
        xmlhttp=new XMLHttpRequest();
    }
    else if (window.ActiveXObject) {
        // code for IE6, IE5
        // try {
        //     xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");//旧版IE
        // }
        // catch (e) { }
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");//新版IE
    }
    if (xmlhttp!=null) {
        xmlhttp.onreadystatechange = state_Change;
        xmlhttp.open("GET",url,true);
        xmlhttp.send(null);
    } else {
        alert("Your browser does not support XMLHTTP.");
    }

    function state_Change() {
        if (xmlhttp.readyState===4)
        {// 4 = "loaded"
            if (xmlhttp.status===200)
            {// 200 = "OK"
                if(typeof fun === "function") {
                    fun(true);
                }
            } else {
                // alert("Problem retrieving XML data:" + xmlhttp.statusText);
                if(typeof fun === "function") {
                    fun(false);
                }
            }
        }
    }
}

//-----------------------------------------------------xml文件操作 开始------------------------------------------------//
/*jq 加载xml文件 (i9不兼容？未确定这个疑惑)*/
function onLoadXML() {
    $.ajax({
        url: '../content/data/config.xml',
        type: 'GET',
        dataType: 'xml',
        //            timeout: 1000,  //设定超时
        cache: false,   //禁用缓存
        error: function(xml) {
            console.log('加载xml文档出错!');
        },
        success: onXMLComplete   //设置成功后回调函数
        // statusCode:{
        //     404: function (data,status) {
        //         //                    console.log("xml-404");
        //     },
        //     200:function (data,status) {
        //         //                    console.log("xml-200");
        //     }
        // }
    });

    function onXMLComplete(xml) {

    }
}

/**
 * 去除xml转成json后属性里的attr前缀
 * @param ary
 * @returns {*}
 */
export function removeXMLAttr(ary) {
    for(let key in ary) {
        const at = ary[key].attr;
        if(!at) {break;}
        ary[key] = at;
    }
    return ary;
}

/*加载xml文件，用类似isUrlValid*/
export function loadXMLFile(_url, fun) {
    var xhttp;
    if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest();
    } else {
        try {
            xhttp = new ActiveXObject("Msxml2.XMLHTTP");//旧版IE
        }
        catch (e) { }
        xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xhttp.onreadystatechange = onStateChange;
    xhttp.open("GET", _url,false);
    xhttp.send();
    function onStateChange() {
        if (xhttp.readyState === 4) {// 4 = "loaded"
            if(xhttp.status === 200) {// 200 = "OK"
                // onXMLComplete(xhttp.responseXML);
                if (typeof fun === 'function') {
                    fun(xhttp.responseXML);
                }
            }else{
                if (typeof fun === 'function') {
                    fun(false);
                }
                // alert('加载xml文档出错!');
                console.log("Problem retrieving XML data:" + xhttp.statusText);
            }
        }
    }
}
//-----------------------------------------------------xml文件操作 结束------------------------------------------------//

// var browserInfo = getBrowser();
// BrowserType = browserInfo.browser;
// alert("browser:"+browserInfo.browser+" version:"+browserInfo.version);
/*获取游览器类型*/
export function getBrowser(){
    var sys = {};
    var ua = navigator.userAgent.toLowerCase();
    var s;
    (s = ua.match(/edge\/([\d.]+)/)) ? sys.edge = s[1] :
        (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? sys.ie = s[1] :
            (s = ua.match(/msie ([\d.]+)/)) ? sys.ie = s[1] :
                (s = ua.match(/firefox\/([\d.]+)/)) ? sys.firefox = s[1] :
                    (s = ua.match(/chrome\/([\d.]+)/)) ? sys.chrome = s[1] :
                        (s = ua.match(/opera.([\d.]+)/)) ? sys.opera = s[1] :
                            (s = ua.match(/version\/([\d.]+).*safari/)) ? sys.safari = s[1] : 0;

    if (sys.edge) return { browser : "Edge", version : sys.edge };
    if (sys.ie) return { browser : "IE", version : sys.ie };
    if (sys.firefox) return { browser : "Firefox", version : sys.firefox };
    if (sys.chrome) return { browser : "Chrome", version : sys.chrome };
    if (sys.opera) return { browser : "Opera", version : sys.opera };
    if (sys.safari) return { browser : "Safari", version : sys.safari };

    return { browser : "", version : "0" };
}



/*添加游览器兼容Array的find函数的方法*/
export function addArrayFind() {
    // https://tc39.github.io/ecma262/#sec-array.prototype.find
    if (!Array.prototype.find) {
        Object.defineProperty(Array.prototype, 'find', {
            value: function(predicate) {
                // 1. Let O be ? ToObject(this value).
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                var o = Object(this);

                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;

                // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }

                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                var thisArg = arguments[1];

                // 5. Let k be 0.
                var k = 0;

                // 6. Repeat, while k < len
                while (k < len) {
                    // a. Let Pk be ! ToString(k).
                    // b. Let kValue be ? Get(O, Pk).
                    // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                    // d. If testResult is true, return kValue.
                    var kValue = o[k];
                    if (predicate.call(thisArg, kValue, k, o)) {
                        return kValue;
                    }
                    // e. Increase k by 1.
                    k++;
                }

                // 7. Return undefined.
                return undefined;
            }
        });
    }
}
/*添加游览器兼容Array的findIndex函数的方法*/
export function addArrayFindIndex() {
    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
    if (!Array.prototype.findIndex) {
        Object.defineProperty(Array.prototype, 'findIndex', {
            value: function(predicate) {
                // 1. Let O be ? ToObject(this value).
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                var o = Object(this);

                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;

                // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }

                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                var thisArg = arguments[1];

                // 5. Let k be 0.
                var k = 0;

                // 6. Repeat, while k < len
                while (k < len) {
                    // a. Let Pk be ! ToString(k).
                    // b. Let kValue be ? Get(O, Pk).
                    // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                    // d. If testResult is true, return k.
                    var kValue = o[k];
                    if (predicate.call(thisArg, kValue, k, o)) {
                        return k;
                    }
                    // e. Increase k by 1.
                    k++;
                }

                // 7. Return -1.
                return -1;
            }
        });
    }
}

/*禁用游览器右键菜单*/
export function disableBrowserRightMenu() {
    //development production
    if(process.env.NODE_ENV === 'development'){return false;}

    //禁用右键菜单;
    document.oncontextmenu = function(){return false;};
    //禁用网页上选取的内容；
    // document.onselectstart = function(){return false;};
    // document.oncopy = function(){return false;};
    // document.oncut = function (){return false;};
}


/*
//js函数里无限参数的写法
appendChilds(pageObject, videoObject.parentNode, audioObject);
function appendChilds() {
    var i, sum = 0;
    for (i = 0; i < arguments.length; i++) {
        sum += arguments[i];
    }
}*/


//---------------------------------------微信环境下用到的功能 开始-------------------------------------------------------//

/* 判断是否是微信环境
 * @returns {boolean}
 */
export function isWeixin() {
    var ua = navigator.userAgent.toLowerCase();
    var isAndroid = ua.indexOf('android') != -1;
    var isIos = (ua.indexOf('iphone') != -1) || (ua.indexOf('ipad') != -1);
    var isWeixin = ua.indexOf('micromessenger') != -1;
    if (!isWeixin) {
        document.head.innerHTML = '<title>抱歉，出错了</title><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0"><link rel="stylesheet" type="text/css" href="https://res.wx.qq.com/open/libs/weui/0.4.1/weui.css">';
        document.body.innerHTML = '<div class="weui_msg"><div class="weui_icon_area"><i class="weui_icon_info weui_icon_msg"></i></div><div class="weui_text_area"><h4 class="weui_msg_title">请在Mobile或者PC的微信客户端中打开链接</h4></div></div>';
        return false;
    }else
    {
        return true;
    }
}

//---------------------------------------微信环境下用到的功能 结束-------------------------------------------------------//

export function getBase64Image(img) {
    // var x2 = this.getBase64Image(imgBtnDocs2);
    // var image = new Image();
    // image.crossOrigin = 'anonymous';
    // image.src = imgBtnDocs2;
    // image.onload = function () {
    //     var base64 = this.getBase64Image(image);
    //     console.log(base64);
    // }

    // var canvas = document.createElement('canvas');
    // canvas.width = 1024;
    // canvas.height = 768;
    // var ctx = canvas.getContext('2d');
    // var img = new Image;
    // img.crossOrigin = 'Anonymous';
    // img.onload = function () {
    //     canvas.height = img.height;
    //     canvas.width = img.width;
    //     ctx.drawImage(img, 0, 0);
    //     var dataURL = canvas.toDataURL('image/jpeg');
    //     callback.call(this, dataURL);
    //     canvas = null;
    // };
    // img.src = url;

    var canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, img.width, img.height);
    var ext = img.src.substring(img.src.lastIndexOf(".")+1).toLowerCase();
    var dataURL = canvas.toDataURL("image/"+ext);
    return dataURL;
}


// 把键盘值（数字 87，86）转成 字符值 A,B等
// var strcode=String.fromCharCode(event.keyCode);
